res <- 'foo'
switch (res,
foo = {write("holas",stdout())}
)
res <- 'cre'
switch (res,
foo = {write("holas",stdout())}
)
source('~/Universidad/AI/Emotional Clasification/ClassificationEmotionModels_ISEAR/R code/data_loader.R')
source('~/Universidad/AI/Emotional Clasification/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
setwd("~/Universidad/AI/Emotional Clasification/ClassificationEmotionModels_ISEAR")
# Test
ss <- getRaw.complete("./py_isear_dataset/isear.csv", "./SemEval_14/AffectiveText.test")
isear.raw <- ss[[1]]
pos <- which(sapply(tokenize_words(isear.raw$SIT), length) %in% c(0,1,2))
if (length(pos) != 0) {isear.raw <- isear.raw[-pos,]}
corpus <- Corpus(VectorSource(isear.raw$SIT))
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(removeWords, stopwords(kind="en")) %>%
tm_map(stripWhitespace)
isear.dtm <- DocumentTermMatrix(corpus.clean)
x$labels_emot <- isear.raw$EMOT
x <- data.frame(scale(as.matrix(isear.dtm)), stringsAsFactors=TRUE)
x$labels_emot <- isear.raw$EMOT
train.naiveBayes <- function( data ){
x <- subset( data, select = -labels_model )
y <- data$labels_model
# fit <- naiveBayes( x, y , laplace = 1)
search_grid <- expand.grid(
usekernel = c(TRUE, FALSE),
fL = 0:5,
adjust = seq(0, 5, by = 1)
)
train_control <- trainControl(
method = "cv",
number = 10
)
fit <- train(
x = x, y = y, method = "nb",
trControl = train_control,
tuneGrid = search_grid,
preProc = c("BoxCox", "center", "scale", "pca"))
return(fit)
}
train.naiveBayes(x)
x <- data.frame(scale(as.matrix(isear.dtm)), stringsAsFactors=TRUE)
x$labels_model <- isear.raw$EMOT
nb <- naive.bayes(x, "labels_emot")
nb <- train.naiveBayes(x)
