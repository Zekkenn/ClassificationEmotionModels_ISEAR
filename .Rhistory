x <- [−262, -265, -256, -267, -270, -272, -272.4, -272.7, -272.8, -272.9]
x <- c(−262, -265, -256, -267, -270, -272, -272.4, -272.7, -272.8, -272.9)
y = c(0.315, 0.202, 0.204 , 0.620, 0.715 , 0.935
, 0.957
, 0.906
, 0.985
, 0.987
)
plot(x, y)
sum ( (x-mean(x))*(y-mean(y))  )
sum ( (x-mean(x))*(x-mean(x))  )
sum ( (x-mean(x))*(y-mean(y))  ) / sum ( (x-mean(x))*(x-mean(x))  )
mean(y) + 0.05282894 * mean(x)
mean(y) - 0.05282894 * mean(x)
mean(x)
mean(y)
sum ( (x-mean(x))*(x-mean(x))  )
1/  sum ( (x-mean(x))*(x-mean(x))  )
sd(y)
sum ( (y-mean(y))*(y-mean(y))  ) - ( sum ( (x-mean(x))*(y-mean(y))  ) / sum ( (x-mean(x))*(x-mean(x))  ) ) * sum ( (x-mean(x))*(y-mean(y))  )
sum( (y - mean(y))^2 )
length(x)
(sum ( (y-mean(y))*(y-mean(y))  ) - ( sum ( (x-mean(x))*(y-mean(y))  ) / sum ( (x-mean(x))*(x-mean(x))  ) ) * sum ( (x-mean(x))*(y-mean(y))  ) ) /8
0.1422518/8
-0.0528 / sqrt( 0.00335*0.0177 )
q()
modelBagg <- list(tuneBagg = "tuneBagg",
BAYES = "modelBayes", SVM = "modelSVM", NN = "modelNN", NRC = "modelNRC")
source("R code/data_loader.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
setwd("C:/Users/ASUS/Documents/Sebastian/ClassificationEmotionModels_ISEAR")
source("R code/data_loader.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
install.packages("syuzhet")
source("R code/data_loader.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
install.packages("mldr")
source("R code/data_loader.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
source("R code/data_loader.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
#--------Load Models--------
modelSVM <- readRDS("R code/models.save/modelSVM.rds")
#--------Save Models--------
saveRDS(modelBayes, file = "R code/models.save/modelBayesSem.rds")
#--------Load Models--------
modelSVM <- readRDS("R code/models.save/modelSVMSem.rds")
modelBayes <- readRDS("R code/models.save/modelBayesSem.rds")
modelNN <- readRDS("R code/models.save/modelNNSem.rds")
dataSem <- getData.SemEval(path = "SemEval_14/AffectiveText.test")
dataIsear <- getData.ISEAR(path = "py_isear_dataset/isear.csv")
levels(dataSem$EMOT)
setLevels(levels(dataSem$EMOT))
bagSem <- bag.of.words(dataSem)
summary(bagSem$labels_model)
sum(summary(bagSem$labels_model))
sum(summary(dataSem$EMOT))
bagSem <- bag.of.words(dataSem)
#-------Composition---------
predSVM <- predict(modelSVM, bagSem)
levels(predSVM) <- list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5")
predBayes <- predict(modelBayes, bagSem)
size <- dim(bagSem)[2]-1
test <- bagSem[,1:size]
pred_with <- compute( modelNN, test )
predNN <- max.col(pred_with$net.result)
predNN <- factor( predNN )
levels(predNN) <- list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5")
test <- get_nrc_sentiment(dataSem$SIT)
str(test)
length(test$anger)
str(test[, c(2,7,8)])
str(test[c("trust")])
str(test[getLevels()])
test <- test[getLevels()]
nrc_prob <- prop.table(as.matrix(test),1)
summary(colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")])
str(colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")])
str(nrc_data)
str(test)
str(colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")])
getLevels()
test <- str(colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")])
test <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
factor(test)
test <- factor(test)
testSVM <- predSVM
test <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
test[is.na(test)] <- "other"
cbind(getLevels(), "other")
rbind(getLevels(), "other")
c( getLevels(), "other" )
test <- factor(test)
levels(test)
levels(predNN)
setLevels(levels(predNN))
pred <- get_nrc_sentiment(dataSem$SIT)
pred <- pred[getLevels()]
pred <- factor(pred)
pred <- get_nrc_sentiment(dataSem$SIT)
str(pred)
pred <- get_nrc_sentiment(dataSem$SIT)
getLevels()
pred <- pred[getLevels()]
nrc_prob <- prop.table(as.matrix(nrc_data),1)
nrc_prob <- prop.table(as.matrix(pred),1)
predict_emot <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
predict_emot[is.na(predict_emot)] <- "other"
predict_emot <- factor(predict_emot)
test <- NULL
levels(predict_emot) <- c( getLevels(), "other" )
predict_emot <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
predict_emot[is.na(predict_emot)] <- "other"
predict_emot <- factor(predict_emot)
predict_emot <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
predict_emot[is.na(predict_emot)] <- "other"
levels(predict_emot) <- c( getLevels(), "other" )
predict_emot <- factor(predict_emot)
predict_emot <- colnames(nrc_prob)[max.col(nrc_prob,ties.method="first")]
predict_emot[is.na(predict_emot)] <- "other"
predict_emot <- factor(predict_emot)
levels(predict_emot) <- list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6")
setLevels( ist("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6") )
setLevels( list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6") )
source("models/NN.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, getLevels())
lbsSVM <- predict.svm(modelSVM, bagOfWords, getLevels())
predSVM <- predict.svm(modelSVM, bagSem, getLevels())
predNN <- predict.nn(modelNN, bagSem, getLevels())
source("R code/models/NaiveBayes.R")
predBayes <- predict.bayes(modelBayes, bagSem, getLevels())
predBayes <- predict.bayes(modelBayes, bagSem)
levels(predBayes) <- getLevels()
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, list("joy" = "X1", "fear" = "X2",
"anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
lbsSVM <- predict.svm(modelSVM, bagSem, list("joy" = "X1", "fear" = "X2",
"anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
predSVM <- predict(modelSVM, bagSem)
levels(predSVM) <- list("joy" = "X1", "fear" = "X2",
+       "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6")
levels(predSVM) <- list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6")
lbsSVM <- predict.svm(modelSVM, bagSem, list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
ecm.model <- list(BAYES = modelBayes, SVM = modelSVM, NN = modelNN, NRC = modelNRC)
ecm.model <- list(BAYES = modelBayes, SVM = modelSVM, NN = modelNN, NRC = get_nrc_sentiment)
head( class.ind(predBayes) )
bagOfWords <- BagSem
bagOfWords <-bagSem
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
lbsNN <- predict.nn(ecm.model$NN, bagOfWords, getLevels())
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
getLevels()
names(getLevels())
source("R code/models/NRC_lexicon.R")
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
pred.data <-dataSem
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
str(pred.data)
dataSem
pred <- get_nrc_sentiment(dataSem$SIT)
pred <- pred[names(getLevels())]
names(getLevels())
pred$other <- 0
pred <- pred[names(getLevels())]
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
source("R code/models/NRC_lexicon.R")
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
lbsBayes <- predict.bayes(ecm.model$BAYES, bagOfWords, getLevels())
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) + class.ind(lbsLex) + class.ind(lbsBayes)
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes)
length(lbsLex)
source("R code/models/NRC_lexicon.R")
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
length(lbsLex)
length(lbsBayes)
bagOfWords <- bag.of.words(pred.data, sparse = 0.9999999)
dim(bagOfWords)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
install.packages("tidyverse")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source("data_loader.R")
source("data_exploration.R")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
remove.packages("tidyverse")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source("data_loader.R")
source("data_exploration.R")
source("R code/models/NN.R")
source("R code/models/SVM.R")
source("R code/models/NaiveBayes.R")
source("R code/models/NRC_lexicon.R")
getwd()
setwd("C:/Users/ASUS/Documents/Sebastian/ClassificationEmotionModels_ISEAR")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source("data_loader.R")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, sparse = 0.9999999)
setwd("C:/Users/ASUS/Documents/Sebastian/ClassificationEmotionModels_ISEAR")
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, sparse = 0.9999999)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, sparse = 0.9999999)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, test = TRUE)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, test = TRUE)
str(pred.data$EMOT)
getLevels()
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
bagOfWords <- bag.of.words(pred.data, test = TRUE)
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
lbsNN <- predict.nn(ecm.model$NN, bagOfWords, getLevels())
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
length(lbsNN)
source("R code/data_loader.R")
bagOfWords <- bag.of.words(pred.data, test = TRUE)
docs <- Corpus(VectorSource(pred.data$SIT))
dim(docs)
length(docs)
words.dict <- scan("dict.txt", what = character())
dtm <- DocumentTermMatrix(docs, list( dictionary = words.dict ))
length(dtm)
dtm
mat <- as.matrix(dtm)
mat <- scale(mat)
bagOfWords <- cbind( mat, data$EMOT )
bagOfWords <- cbind( mat, pred.data$EMOT )
colnames( bagOfWords )[ ncol(bagOfWords) ] <- "labels_model"
bagOfWords <- as.data.frame(bagOfWords)
dim(bagOfWords)
bagOfWords <- mutate_all(bagOfWords,funs(replace(., is.na(.), 0)))
dim(bagOfWords)
bagOfWords$labels_model <- factor(bagOfWords$labels_model)
levels(bagOfWords$labels_model) <- getLevels()
str(bagOfWords$labels_model)
getLevels()
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
bagOfWords <- bag.of.words(pred.data, test = TRUE)
dim(bagOfWords)
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
length(lbsSVM)
lbsNN <- predict.nn(ecm.model$NN, bagOfWords, getLevels())
lbsBayes <- predict.bayes(ecm.model$BAYES, bagOfWords, getLevels())
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes) + class.ind(lbsLex)
length(lbsNN)
length(lbsSVM)
size <- dim(bagOfWords)[2]-1
test <- bagOfWords[,1:size]
pred_with <- compute( modelNN, test )
str(pred_with)
predNN <- max.col(pred_with$net.result)
length(predNN)
predNN <- factor( predNN )
str(predNN)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
lbsNN <- predict.nn(ecm.model$NN, bagOfWords, getLevels())
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes) + class.ind(lbsLex)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
colnames(lbsNN)[max.col(pred,ties.method="first")]
colnames(pred)[max.col(pred,ties.method="first")]
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
pred <- colnames(pred)[max.col(pred,ties.method="first")]
confusionMatrix(pred.data$EMOT, pred)
str(pred.data$EMOT)
length(pred.data$EMOT)
levels(pred.data$EMOT)
levels(bagOfWords$labels_model)
confusionMatrix(bagOfWords$labels_model, pred)
levels(pred)
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes) + class.ind(lbsLex)
pred <- colnames(pred)[max.col(pred,ties.method="first")]
confusionMatrix(bagOfWords$labels_model, pred)
levels(pred)
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
pred <- factor(colnames(pred)[max.col(pred,ties.method="first")])
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes) + class.ind(lbsLex)
pred <- factor(colnames(pred)[max.col(pred,ties.method="first")])
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
pred.data <- pred.data[ pred.data$EMOT != "surprise" ]
head(pred.data[ pred.data$EMOT != "surprise" ])
head(pred.data[ pred.data$EMOT != "surprise", ])
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
pred.data <- pred.data[ pred.data$EMOT != "surprise", ]
bagOfWords <- bag.of.words(pred.data, test = TRUE)
bagOfWords <- cbind( mat, data$EMOT )
data <- pred.data
docs <- Corpus(VectorSource(data$SIT))
dtm <- DocumentTermMatrix(docs, list( dictionary = words.dict ))
mat <- as.matrix(dtm)
mat <- scale(mat)
bagOfWords <- cbind( mat, data$EMOT )
colnames( bagOfWords )[ ncol(bagOfWords) ] <- "labels_model"
bagOfWords <- as.data.frame(bagOfWords)
#bagOfWords <- mutate_all(bagOfWords,funs(replace(., is.na(.), 0)))
bagOfWords[ is.na(bagOfWords) ] <- 0
bagOfWords$labels_model <- factor(bagOfWords$labels_model)
levels(bagOfWords$labels_model)
levels(bagOfWords$labels_model) <- getLevels()
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
bagOfWords <- bag.of.words(pred.data, test = TRUE)
getLevels(length(bagOfWords$labels_model))
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
levels(bagOfWords$labels_model) <- getLevels()
source('~/Sebastian/ClassificationEmotionModels_ISEAR/R code/Emotional_classifier.R')
setLevels(list("joy" = "1", "fear" = "2", "anger" = "3", "sadness" = "4", "disgust" = "5", "other" = "6"))
pred.data <- pred.data[ pred.data$EMOT != "surprise", ]
bagOfWords <- bag.of.words(pred.data, test = TRUE)
lbsSVM <- predict.svm(ecm.model$SVM, bagOfWords, list("joy" = "X1", "fear" = "X2", "anger" = "X3", "sadness" = "X4", "disgust" = "X5", "other" = "X6"))
lbsNN <- predict.nn(ecm.model$NN, bagOfWords, getLevels())
lbsLex <- predict.lex(ecm.model$NRC, pred.data)
lbsBayes <- predict.bayes(ecm.model$BAYES, bagOfWords, getLevels())
#Evaluation
pred <- class.ind(lbsSVM) + class.ind(lbsNN) +  class.ind(lbsBayes) + class.ind(lbsLex)
pred <- factor(colnames(pred)[max.col(pred,ties.method="first")])
levels(pred)
levels(lbsLex)
levels(lbsNN)
levels(lbsBayes)
levels(lbsSVM)
summary(lbsLex)
